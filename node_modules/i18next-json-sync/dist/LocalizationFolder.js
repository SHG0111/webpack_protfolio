"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
var fs = require("fs");
var path = require("path");
var stringify = require('json-stable-stringify');
var LocalizationFolder = /** @class */ (function () {
    function LocalizationFolder(files, primaryLanguage, isReportMode) {
        this.files = files;
        this.primaryLanguage = primaryLanguage;
        this.isReportMode = isReportMode;
        this.hashes = {};
        this.hashes = {};
    }
    LocalizationFolder.prototype.populateFromDisk = function (filesToCreate) {
        var _this = this;
        var filesReadFromDisk = Object.keys(this.files).map(function (name) {
            var fileContent = fs.readFileSync(name, 'utf8');
            _this.files[name] = JSON.parse(fileContent);
            _this.hashes[name] = crypto.createHash('md5').update(fileContent).digest('hex');
            return path.basename(name, '.json');
        });
        var dirname = path.dirname(Object.keys(this.files)[0]);
        this.registerMissingFiles(filesToCreate, filesReadFromDisk, dirname);
    };
    LocalizationFolder.prototype.registerMissingFiles = function (shouldExist, doExist, dirname) {
        for (var _i = 0, shouldExist_1 = shouldExist; _i < shouldExist_1.length; _i++) {
            var file = shouldExist_1[_i];
            if (doExist.indexOf(file) > -1) {
                continue;
            }
            var filename = path.join(dirname, file + '.json').split(path.sep).join('/');
            this.files[filename] = {};
            this.hashes[filename] = '';
        }
    };
    LocalizationFolder.prototype.flushToDisk = function (jsonSpacing, lineEnding, addFinalNewline) {
        var _this = this;
        var changedFiles = [];
        Object.keys(this.files).forEach(function (name) {
            var fileContent = stringify(_this.files[name], { space: jsonSpacing });
            if (lineEnding === 'CRLF') {
                fileContent = fileContent.replace(/\n/g, '\r\n');
            }
            if (addFinalNewline) {
                switch (lineEnding) {
                    case 'LF':
                        fileContent += '\n';
                        break;
                    case 'CRLF':
                        fileContent += '\r\n';
                        break;
                }
            }
            var hash = crypto.createHash('md5').update(fileContent).digest('hex');
            if (_this.hashes[name] !== hash) {
                changedFiles.push(name);
            }
            if (!_this.isReportMode) {
                fs.writeFileSync(name, fileContent, { encoding: 'utf8' });
            }
            _this.hashes[name] = null;
            _this.files[name] = null;
        });
        return changedFiles;
    };
    LocalizationFolder.prototype.getSourceObject = function () {
        var _this = this;
        var source;
        Object.keys(this.files).forEach(function (name) {
            if (path.basename(name, '.json') === _this.primaryLanguage) {
                source = _this.files[name];
            }
        });
        return source;
    };
    LocalizationFolder.prototype.getTargetObject = function (name) {
        return this.files[name];
    };
    LocalizationFolder.prototype.getFilenames = function () {
        return Object.keys(this.files);
    };
    return LocalizationFolder;
}());
exports.default = LocalizationFolder;
//# sourceMappingURL=LocalizationFolder.js.map